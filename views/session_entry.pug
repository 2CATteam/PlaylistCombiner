doctype html
html
	head
		title= session.name + " - Spotify Guessing Game"
		meta(charset="utf-8")
		meta(name="description", content="A game where you guess who listens to what Spotify songs")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css", rel="stylesheet", integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH", crossorigin="anonymous")
		link(rel="stylesheet", type="text/css" href="/styles.css")
		script(src="/scripts.js" type="text/javascript")
	body 
		.d-flex.justify-content-center.bg-success.py-3.min-vh-100
			.d-flex.w-100.justify-content-center.align-items-center.py-3#wrapContainer.bg-light.rounded-5
				.d-flex.flex-column.align-items-stretch
					h3.mb-3.text-center= session.name 
					.d-flex.w-100.justify-content-center.flex-column#loginStep
						h5.wrap-text Welcome! You've been invited to share your favorite songs!
						
						if session.mode == session_modes.CUSTOM_PLAYLIST
							p= `Once you log in below with Spotify, you'll be asked to provide a playlist of at least ${session.size} songs.`
						if session.mode == session_modes.TOP_SONGS
							- let range = "UNKNOWN"
							- if (session.top_songs_range == "short_term") range = "month"
							- if (session.top_songs_range == "medium_term") range = "6 months"
							- if (session.top_songs_range == "long_term") range = "year (or so)"
							p= `Once you log in below with Spotify, we'll pull your top ${session.size} songs from the last ${range} for you!`
						if session.mode == session_modes.LIKED_SONGS
							p= `Once you log in below with Spotify, we'll pull your ${session.size} most recently-liked songs for you!`
						if session.mode == session_modes.LAST_PLAYED
							p= `Once you log in below with Spotify, we'll pull your ${session.size} most recently-played songs for you!`
						p These songs will be shuffled in with your friends', to build a shared playlist.
						p Afterwards, you'll be given the option to take a quiz on the combined playlist!
						if session.dedupe 
							p <strong>Note that, if an artist has multiple songs, only the first song from each artist will be taken.</strong><br>This may result in fewer than #{session.size} being pulled for you.
						a.btn.btn-primary#authLink(href="/" + session.id + "/login") Click here to log in with Spotify!	
						.d-flex.w-100.justify-content-center.d-none#successText
							p.text-success Successfully logged in!
						hr
					
					.d-flex.w-100.justify-content-center.flex-column.d-none#nameStep
						label.form-label(for="name") Put in your name. <strong>Make sure your friends can tell it's you!</strong> Put a last name, if needed
						input#name.form-control.mb-3(type="text", name="name", onkeydown="enterPressed()")
						if session.mode == session_modes.CUSTOM_PLAYLIST
							label.form-label(for="playlistLink") Then, put a link to your playlist below:
							input#playlistLink.form-control.mb-3(type="text", name="playlistLink" onkeydown="enterPressed()")
						
						button.btn.btn-primary(onclick="submitSongs()") Submit your songs!
						hr
					
					.d-flex.w-100.justify-content-center.flex-column.d-none#waitStep
						h3.mb-3 Submitted users:
						.ms-5.mb-3
							ul#usersList.list-group
						.d-none#notEnoughWarning
							p Some users don't have the maximum amount of songs.<br>That's fine! The playlist will just be a bit shorter.
						
						h3 Wait until everyone's in, then save the playlist!
						button.btn.btn-primary.mb-2#savePlaylistButton(onclick="savePlaylist()") Save combined playlist to Spotify!
						button.btn.btn-primary#startQuizButton(onclick="startQuiz()") Take a quiz on the playlist!
						.mt-3.mb-2
							input#includeMe(type="checkbox", name="includeMe")
							label.ms-2(for="includeMe") Include my own songs in the playlist
		script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js", integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz", crossorigin="anonymous") 
		script. 
			const session_mode = !{JSON.stringify(session.mode)}
			const session = !{JSON.stringify(session)}
			const session_modes = !{JSON.stringify(session_modes)}
			let user_refresh_interval = null

			function enterPressed() {
				if(event.key === 'Enter') {
					submitSongs()
				}
			}

			async function submitSongs() {
				let name = document.querySelector("#name").value
				if (!name) {
					alert("Name is required")
					return
				}

				let uri_match = null

				if (session.mode == session_modes.CUSTOM_PLAYLIST) {
					let playlist_selected = document.querySelector("#playlistLink").value
					uri_match = playlist_selected.match(/playlist\/(\w+)/i)
					if (!uri_match) {
						alert("Invalid playlist link! Make sure your playlist link works!")
						return
					} else {
						uri_match = uri_match[1]
					}
				}

				try {
					let response = await postRequest(`/${session.id}/addUser`, {name: name}, {"Content-type": "application/json"})
					if (response.status != 200) {
						alert("Unable to add user")
						return
					}
					
					try {
						console.log(response.responseText)
						let user_id = JSON.parse(response.responseText).userId
						let loaded_songs = []
						let submitting_songs = []
						if (session.mode == session_modes.CUSTOM_PLAYLIST) {
							loaded_songs = await getRequest(
								`https://api.spotify.com/v1/playlists/${uri_match}/tracks?limit=50`,
								{ Authorization: `Bearer ${getCookie("spotify_token")}` }
							)
						} else if (session.mode == session_modes.TOP_SONGS) {
							loaded_songs = await getRequest(
								`https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=${session.top_songs_range}`,
								{ Authorization: `Bearer ${getCookie("spotify_token")}` }
							)
						} else if (session.mode == session_modes.LIKED_SONGS) {
							loaded_songs = await getRequest(
								`https://api.spotify.com/v1/me/tracks?limit=50`,
								{ Authorization: `Bearer ${getCookie("spotify_token")}` }
							)
						} else if (session.mode == session_modes.LAST_PLAYED) {
							loaded_songs = await getRequest(
								`https://api.spotify.com/v1/me/player/recently-played?limit=50`,
								{ Authorization: `Bearer ${getCookie("spotify_token")}` }
							)
						}
						console.log(loaded_songs)
						loaded_songs = JSON.parse(loaded_songs.responseText).items
						let artists = {}
						console.log(session.mode)
						console.log(session_modes)
						console.log(loaded_songs)
						for (let i of loaded_songs) {
							if (session.dedupe) {
								let found_match = false;
								for (let j of (i.track || i).artists) {
									if (j.id in artists) {
										found_match = true
									} else {
										artists[j.id] = (i.track || i).id
									}
								}
								if (found_match) {
									continue
								}
							}
							submitting_songs.push((i.track || i).id)
							if (submitting_songs.length >= session.size) {
								break
							}
						}
						console.log(submitting_songs)
						await postRequest(
							`/${session.id}/${user_id}/addSongs`,
							{songs: submitting_songs},
							{"Content-type": "application/json"}
						)
						document.querySelector("#waitStep").classList.remove("d-none")
						user_refresh_interval = setInterval(refreshUsers, 2000)
						refreshUsers()
					} catch (err) {
						alert("Unable to submit songs!")
						console.error(err)
						return
					}
				} catch (err) {
					alert("Unable to add user")
					console.error(err)
					return
				}
			}

			function refreshUsers() {
				getRequest(`/${session.id}/users`).then((res) => {
					let users_list = JSON.parse(res.responseText).users
					console.log(users_list)
					let display_div = document.querySelector("#usersList")
					let warning_div = document.querySelector("#notEnoughWarning")
					warning_div.classList.add("d-none")
					display_div.innerHTML = ''
					for (let user of users_list) {
						let to_add = document.createElement("li")
						to_add.innerText = `${user.name} (${user.song_count}/${session.size})`
						display_div.appendChild(to_add)
						if (user.song_count < session.size) {
							warning_div.classList.remove("d-none")
						}
					}
					if (users_list.length > 0) {
						document.querySelector("#startQuizButton").disabled = false
						document.querySelector("#savePlaylistButton").disabled = false
						document.querySelector("#includeMe").disabled = false
					} else {
						document.querySelector("#startQuizButton").disabled = true
						document.querySelector("#savePlaylistButton").disabled = true
						document.querySelector("#includeMe").disabled = true
					}
				}).catch((res) => {
					console.error(res)
				})
			}

			async function savePlaylist() {
				let me_data = await getRequest("https://api.spotify.com/v1/me", 
					{ Authorization: `Bearer ${getCookie("spotify_token")}` }
				)
				let user_uri = JSON.parse(me_data.responseText).id
				if (!user_uri) {
					console.error(me_data)
					alert("Unable to save playlist - unable to retrieve Spotify User ID")
					return
				}

				let song_uris = []
				let song_list = JSON.parse((await getRequest(`/${session.id}/songs`)).responseText)
				for (let song of song_list.songs) {
					song_uris.push(`spotify:track:${song.song}`)
				}

				let new_playlist = await postRequest(`https://api.spotify.com/v1/users/${user_uri}/playlists`, 
					{
						name: "#{session.name}",
						description: `Created by Spotify Guessing Game - ${window.location.hostname}`,
						public: false
					},
					{ Authorization: `Bearer ${getCookie("spotify_token")}` }
				)
				new_playlist = JSON.parse(new_playlist.responseText)
				let added_items = await postRequest(`https://api.spotify.com/v1/playlists/${new_playlist.id}/tracks`, 
					{
						uris: song_uris
					},
					{ Authorization: `Bearer ${getCookie("spotify_token")}` }
				)
				console.log("Done! Check Spotify!")
				alert("Successfully saved playlist!")
			}

			function startQuiz() {
				window.location.href = `/${session.id}/quiz?includeMe=${document.querySelector("#includeMe").checked ? 1 : 0}`
			}

			window.onload = () => {
				let token = getCookie("spotify_token")
				let refresh_token = getCookie("refresh_cookie")
				let user = getCookie("user")
				console.log(token)
				console.log(refresh_token)
				console.log(user)
				if ((!token) && refresh_token) {
					console.log("Trying to refresh token")
					getRequest(`/${session.id}/refresh_token`).then((response) => {
						console.log(response)
						if (response.status == 200) {
							console.log(response.responseText)
							location.reload()
						} else {
							console.error(response.responseText)
							alert("Renewing Spotify token failed - please log in again!")
						}
					}).catch((response) => {
						console.error(response.responseText)
						alert("Renewing Spotify token failed - please log in again!")
					})
				}
				if (token) {
					document.querySelector("#nameStep").classList.remove("d-none")
					document.querySelector("#authLink").classList.add("disabled")
					document.querySelector("#successText").classList.remove("d-none")
				}
				if (user) {
					document.querySelector("#waitStep").classList.remove("d-none")
					user_refresh_interval = setInterval(refreshUsers, 2000)
					refreshUsers()
				}
			}